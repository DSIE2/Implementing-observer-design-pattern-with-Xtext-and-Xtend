/*
 * generated by Xtext 2.12.0
 */
package org.upct.patterns.observer.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.upct.patterns.observer.observer.ElementType;
import org.upct.patterns.observer.observer.Model;
import org.upct.patterns.observer.observer.Observer;
import org.upct.patterns.observer.observer.ObserverPackage;
import org.upct.patterns.observer.observer.Observers;
import org.upct.patterns.observer.observer.Subject;
import org.upct.patterns.observer.observer.Subjects;
import org.upct.patterns.observer.services.ObserverGrammarAccess;

@SuppressWarnings("all")
public class ObserverSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ObserverGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ObserverPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ObserverPackage.ELEMENT_TYPE:
				sequence_ElementType(context, (ElementType) semanticObject); 
				return; 
			case ObserverPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ObserverPackage.OBSERVER:
				sequence_Observer(context, (Observer) semanticObject); 
				return; 
			case ObserverPackage.OBSERVERS:
				sequence_Observers(context, (Observers) semanticObject); 
				return; 
			case ObserverPackage.SUBJECT:
				sequence_Subject(context, (Subject) semanticObject); 
				return; 
			case ObserverPackage.SUBJECTS:
				sequence_Subjects(context, (Subjects) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ElementType returns ElementType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ElementType(ISerializationContext context, ElementType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ObserverPackage.Literals.ELEMENT_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ObserverPackage.Literals.ELEMENT_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementTypeAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Type+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Observer returns Observer
	 *
	 * Constraint:
	 *     observer=ElementType
	 */
	protected void sequence_Observer(ISerializationContext context, Observer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ObserverPackage.Literals.OBSERVER__OBSERVER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ObserverPackage.Literals.OBSERVER__OBSERVER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObserverAccess().getObserverElementTypeParserRuleCall_0(), semanticObject.getObserver());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Observers
	 *     Observers returns Observers
	 *
	 * Constraint:
	 *     observers+=Observer+
	 */
	protected void sequence_Observers(ISerializationContext context, Observers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subject returns Subject
	 *
	 * Constraint:
	 *     subject=ElementType
	 */
	protected void sequence_Subject(ISerializationContext context, Subject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ObserverPackage.Literals.SUBJECT__SUBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ObserverPackage.Literals.SUBJECT__SUBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubjectAccess().getSubjectElementTypeParserRuleCall_0(), semanticObject.getSubject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Subjects
	 *     Subjects returns Subjects
	 *
	 * Constraint:
	 *     subjects+=Subject+
	 */
	protected void sequence_Subjects(ISerializationContext context, Subjects semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

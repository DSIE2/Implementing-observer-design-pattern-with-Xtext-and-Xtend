/*
 * generated by Xtext 2.12.0
 */
package org.upct.patterns.observer.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ObserverGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.upct.patterns.observer.Observer.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.upct.patterns.observer.Observer.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubjectsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObserversParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Subjects | Observers;
		@Override public ParserRule getRule() { return rule; }
		
		//Subjects | Observers
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Subjects
		public RuleCall getSubjectsParserRuleCall_0() { return cSubjectsParserRuleCall_0; }
		
		//Observers
		public RuleCall getObserversParserRuleCall_1() { return cObserversParserRuleCall_1; }
	}
	public class SubjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.upct.patterns.observer.Observer.Subjects");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubjectsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubjectsSubjectParserRuleCall_1_0 = (RuleCall)cSubjectsAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Subjects:
		//	'subjects:' subjects+=Subject+ ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'subjects:' subjects+=Subject+ ';'
		public Group getGroup() { return cGroup; }
		
		//'subjects:'
		public Keyword getSubjectsKeyword_0() { return cSubjectsKeyword_0; }
		
		//subjects+=Subject+
		public Assignment getSubjectsAssignment_1() { return cSubjectsAssignment_1; }
		
		//Subject
		public RuleCall getSubjectsSubjectParserRuleCall_1_0() { return cSubjectsSubjectParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ObserversElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.upct.patterns.observer.Observer.Observers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObserversKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObserversAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObserversObserverParserRuleCall_1_0 = (RuleCall)cObserversAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Observers:
		//	'observers:' observers+=Observer+ ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'observers:' observers+=Observer+ ';'
		public Group getGroup() { return cGroup; }
		
		//'observers:'
		public Keyword getObserversKeyword_0() { return cObserversKeyword_0; }
		
		//observers+=Observer+
		public Assignment getObserversAssignment_1() { return cObserversAssignment_1; }
		
		//Observer
		public RuleCall getObserversObserverParserRuleCall_1_0() { return cObserversObserverParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.upct.patterns.observer.Observer.Subject");
		private final Assignment cSubjectAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSubjectElementTypeParserRuleCall_0 = (RuleCall)cSubjectAssignment.eContents().get(0);
		
		//Subject:
		//	subject=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//subject=ElementType
		public Assignment getSubjectAssignment() { return cSubjectAssignment; }
		
		//ElementType
		public RuleCall getSubjectElementTypeParserRuleCall_0() { return cSubjectElementTypeParserRuleCall_0; }
	}
	public class ObserverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.upct.patterns.observer.Observer.Observer");
		private final Assignment cObserverAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cObserverElementTypeParserRuleCall_0 = (RuleCall)cObserverAssignment.eContents().get(0);
		
		//Observer:
		//	observer=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//observer=ElementType
		public Assignment getObserverAssignment() { return cObserverAssignment; }
		
		//ElementType
		public RuleCall getObserverElementTypeParserRuleCall_0() { return cObserverElementTypeParserRuleCall_0; }
	}
	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.upct.patterns.observer.Observer.ElementType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ElementType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final TypeElements pType;
	private final SubjectsElements pSubjects;
	private final ObserversElements pObservers;
	private final SubjectElements pSubject;
	private final ObserverElements pObserver;
	private final ElementTypeElements pElementType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ObserverGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pType = new TypeElements();
		this.pSubjects = new SubjectsElements();
		this.pObservers = new ObserversElements();
		this.pSubject = new SubjectElements();
		this.pObserver = new ObserverElements();
		this.pElementType = new ElementTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.upct.patterns.observer.Observer".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Type*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Type:
	//	Subjects | Observers;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Subjects:
	//	'subjects:' subjects+=Subject+ ';';
	public SubjectsElements getSubjectsAccess() {
		return pSubjects;
	}
	
	public ParserRule getSubjectsRule() {
		return getSubjectsAccess().getRule();
	}
	
	//Observers:
	//	'observers:' observers+=Observer+ ';';
	public ObserversElements getObserversAccess() {
		return pObservers;
	}
	
	public ParserRule getObserversRule() {
		return getObserversAccess().getRule();
	}
	
	//Subject:
	//	subject=ElementType;
	public SubjectElements getSubjectAccess() {
		return pSubject;
	}
	
	public ParserRule getSubjectRule() {
		return getSubjectAccess().getRule();
	}
	
	//Observer:
	//	observer=ElementType;
	public ObserverElements getObserverAccess() {
		return pObserver;
	}
	
	public ParserRule getObserverRule() {
		return getObserverAccess().getRule();
	}
	
	//ElementType:
	//	name=ID;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

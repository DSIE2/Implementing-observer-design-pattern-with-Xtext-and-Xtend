/*
 * generated by Xtext 2.12.0
 */
package org.upct.patterns.observer.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.upct.patterns.observer.observer.Subject
import org.upct.patterns.observer.observer.Observer

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ObserverGenerator extends AbstractGenerator {
	
	final String PACKAGE_NAME = "observer";

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		fsa.generateFile(PACKAGE_NAME + "/ISubject.java", compileISubject);
		fsa.generateFile(PACKAGE_NAME + "/IObserver.java", compileIObserver);
		
		for (e : resource.allContents.toIterable.filter(Subject)) {
			fsa.generateFile(PACKAGE_NAME + "/" 
				+ e.subject.name.toFirstUpper + ".java", e.compile
			)
		}
		
		for (e : resource.allContents.toIterable.filter(Observer)) {
			fsa.generateFile(PACKAGE_NAME + "/" 
				+ e.observer.name.toFirstUpper + ".java", e.compile
			)
		}
	}
	
	def compileISubject() {
		'''
		package «PACKAGE_NAME»;
		
		public interface ISubject {
			void register(IObserver o);
			void unregister(IObserver o);
			void notifyObservers();
		}
		'''
	}
	
	def compileIObserver() {
		'''
		package «PACKAGE_NAME»;
		
		public interface IObserver {
			public void update(Object o);
		}
		'''
	}
	
	def compile(Subject s) {
		'''
		package «PACKAGE_NAME»;
		
		import java.util.ArrayList;
		
		public class «s.subject.name.toFirstUpper» implements ISubject {
			
			public ArrayList<IObserver> observers = new ArrayList<IObserver>();

			public void register(IObserver o) {
				this.observers.add(o);
			}
			public void unregister(IObserver o) {
				int index = this.observers.indexOf(o);
				if (index > -1) this.observers.remove(index);
			}
			public void notifyObservers() {
				for (IObserver o : this.observers) o.update(this);
			}
			
			public int observers() {
				return this.observers.size();
			}
		}
		'''
	}
	
	def compile(Observer o) {
		'''
		package «PACKAGE_NAME»;
		
		public class «o.observer.name.toFirstUpper» implements IObserver {
			public void update(Object o) {
				
			}
		}
		'''
	}
}
